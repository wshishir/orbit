// prisma/schema.prisma
// This file defines the structure of your database

// Generator: How Prisma creates the client code
generator client {
  provider = "prisma-client-js"
}

// Datasource: Where your database lives
datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL") 
  directUrl = env("DATABASE_URL")
}

// USER TABLE - Stores user account information
model User {
  id            String   @id @default(cuid())  // Unique ID for each user
  email         String   @unique                // Email (must be unique)
  name          String?                         // Optional name
  password      String                          // Hashed password (we'll secure this)
  createdAt     DateTime @default(now())        // When account was created
  updatedAt     DateTime @updatedAt             // Last update time
  
  // Relationships
  chats         Chat[]   // One user can have many chats
  
  @@index([email])  // Makes email searches faster
}

// CHAT TABLE - Represents a conversation session
model Chat {
  id            String   @id @default(cuid())  // Unique chat ID
  title         String?                         // Optional chat title
  userId        String                          // Which user owns this chat
  createdAt     DateTime @default(now())        // When chat started
  updatedAt     DateTime @updatedAt             // Last activity in chat
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[] // One chat has many messages
  
  @@index([userId])  // Makes finding user's chats faster
}

// MESSAGE TABLE - Individual messages in a chat
model Message {
  id            String   @id @default(cuid())  // Unique message ID
  content       String   @db.Text               // The actual message text (can be long)
  role          Role                            // Who sent it (user or assistant)
  chatId        String                          // Which chat this belongs to
  contentType   ContentType?                   // Type of content (article, tweet, etc.)
  createdAt     DateTime @default(now())        // When message was sent
  
  // Relationships
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@index([chatId])  // Makes loading chat messages faster
}

// ENUM - Defines who sent the message
enum Role {
  USER      // The person using the app
  ASSISTANT // The AI (Gemini)
}

// ENUM - Types of content that can be generated
enum ContentType {
  ARTICLE
  REPORT
  LINKEDIN_POST
  TWEET
  GENERAL
}