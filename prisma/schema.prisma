// prisma/schema.prisma
// Updated schema with BetterAuth tables

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== YOUR EXISTING MODELS =====

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  
  @@index([email])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Account {
  id                    String   @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ===== YOUR EXISTING MODELS =====

model Chat {
  id            String   @id @default(cuid())
  title         String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  
  @@index([userId])
}

model Message {
  id            String   @id @default(cuid())
  content       String   @db.Text
  role          Role
  chatId        String
  contentType   ContentType?
  createdAt     DateTime @default(now())
  
  // Relationships
  chat          Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@index([chatId])
}

// ===== ENUMS =====

enum Role {
  USER
  ASSISTANT
}

enum ContentType {
  ARTICLE
  REPORT
  LINKEDIN_POST
  TWEET
  GENERAL
}